/* This program goes through a loop
 * and outputs if the loop counter 'i'
 * is even(or 0) or odd, and breaks
 * the loop when i is 6
 */

//Entry point, main function
breakfastOrder main() orderOf wholeMilk
{
  //Declarations of variables
  wholeMilk @ i;
  wholeMilk @ loopCount;
  wholeMilk[4] @ nums;
  breakfastItem[50] @ loopString;

  nums[2] <- 5;
  loopCount <- 10;
  loopString <- "i is even or 0!\n";
  loopString[5] <- '2';
  //Loop structure
  roll (i : 0 -> (loopCount - 1) stepBy 1)
  {
    //fresh is conditional if
    fresh((i % 2) <==> 0)
    {
      i <- (i+3) * 2;
      //Print to standard out stream
      //serveOut(loopString);

      //If i is 6 break it
      fresh(i <==> 6)
      {
        //serveOut("Breaking the Loop! We're done!\n");
        break;
      }

      i <- 4;
    }
    ?fresh(i  <=!=> 12)
    {
      breakfastItem[50] @ b;
      b <- orderIn(5);
      //serveOut(b);
    }
    expired //Conditional Else
    {
      //serveOut("i is Odd!\n");
    }

    wholeMilk @ testNum;
    testNum <- 12;
  }

  //orderUp returns
  orderUp 0;
}
